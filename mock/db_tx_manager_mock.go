// Code generated by MockGen. DO NOT EDIT.
// Source: db_tx_manager.go

// Package mock_gormtx is a generated GoMock package.
package mock_gormtx

import (
	context "context"
	reflect "reflect"

	gormtx "github.com/erkesi/gormtx"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockDBTxManager is a mock of DBTxManager interface.
type MockDBTxManager struct {
	ctrl     *gomock.Controller
	recorder *MockDBTxManagerMockRecorder
}

// MockDBTxManagerMockRecorder is the mock recorder for MockDBTxManager.
type MockDBTxManagerMockRecorder struct {
	mock *MockDBTxManager
}

// NewMockDBTxManager creates a new mock instance.
func NewMockDBTxManager(ctrl *gomock.Controller) *MockDBTxManager {
	mock := &MockDBTxManager{ctrl: ctrl}
	mock.recorder = &MockDBTxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBTxManager) EXPECT() *MockDBTxManagerMockRecorder {
	return m.recorder
}

// AutoDB mocks base method.
func (m *MockDBTxManager) AutoDB(ctx context.Context) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoDB", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// AutoDB indicates an expected call of AutoDB.
func (mr *MockDBTxManagerMockRecorder) AutoDB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoDB", reflect.TypeOf((*MockDBTxManager)(nil).AutoDB), ctx)
}

// BackupDB mocks base method.
func (m *MockDBTxManager) BackupDB() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupDB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// BackupDB indicates an expected call of BackupDB.
func (mr *MockDBTxManagerMockRecorder) BackupDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupDB", reflect.TypeOf((*MockDBTxManager)(nil).BackupDB))
}

// CloseMainTx mocks base method.
func (m *MockDBTxManager) CloseMainTx(ctx context.Context, txid uint64, err *error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseMainTx", ctx, txid, err)
}

// CloseMainTx indicates an expected call of CloseMainTx.
func (mr *MockDBTxManagerMockRecorder) CloseMainTx(ctx, txid, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseMainTx", reflect.TypeOf((*MockDBTxManager)(nil).CloseMainTx), ctx, txid, err)
}

// MainDB mocks base method.
func (m *MockDBTxManager) MainDB(ctx context.Context) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MainDB", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// MainDB indicates an expected call of MainDB.
func (mr *MockDBTxManagerMockRecorder) MainDB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MainDB", reflect.TypeOf((*MockDBTxManager)(nil).MainDB), ctx)
}

// MustMainTx mocks base method.
func (m *MockDBTxManager) MustMainTx(ctx context.Context) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustMainTx", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// MustMainTx indicates an expected call of MustMainTx.
func (mr *MockDBTxManagerMockRecorder) MustMainTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustMainTx", reflect.TypeOf((*MockDBTxManager)(nil).MustMainTx), ctx)
}

// OpenMainTx mocks base method.
func (m *MockDBTxManager) OpenMainTx(ctx context.Context, opts ...gormtx.DBTxOpt) (context.Context, uint64) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OpenMainTx", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(uint64)
	return ret0, ret1
}

// OpenMainTx indicates an expected call of OpenMainTx.
func (mr *MockDBTxManagerMockRecorder) OpenMainTx(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenMainTx", reflect.TypeOf((*MockDBTxManager)(nil).OpenMainTx), varargs...)
}
